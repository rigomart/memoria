/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedSettingsRouteImport } from './routes/_authenticated/settings'
import { Route as AuthenticatedWorkspaceRouteRouteImport } from './routes/_authenticated/workspace/route'
import { Route as AuthenticatedWorkspaceIndexRouteImport } from './routes/_authenticated/workspace/index'
import { Route as AuthenticatedWorkspaceDocIdIndexRouteImport } from './routes/_authenticated/workspace/$docId/index'

const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedSettingsRoute = AuthenticatedSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedWorkspaceRouteRoute =
  AuthenticatedWorkspaceRouteRouteImport.update({
    id: '/workspace',
    path: '/workspace',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedWorkspaceIndexRoute =
  AuthenticatedWorkspaceIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedWorkspaceRouteRoute,
  } as any)
const AuthenticatedWorkspaceDocIdIndexRoute =
  AuthenticatedWorkspaceDocIdIndexRouteImport.update({
    id: '/$docId/',
    path: '/$docId/',
    getParentRoute: () => AuthenticatedWorkspaceRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/workspace': typeof AuthenticatedWorkspaceRouteRouteWithChildren
  '/settings': typeof AuthenticatedSettingsRoute
  '/workspace/': typeof AuthenticatedWorkspaceIndexRoute
  '/workspace/$docId': typeof AuthenticatedWorkspaceDocIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings': typeof AuthenticatedSettingsRoute
  '/workspace': typeof AuthenticatedWorkspaceIndexRoute
  '/workspace/$docId': typeof AuthenticatedWorkspaceDocIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/_authenticated/workspace': typeof AuthenticatedWorkspaceRouteRouteWithChildren
  '/_authenticated/settings': typeof AuthenticatedSettingsRoute
  '/_authenticated/workspace/': typeof AuthenticatedWorkspaceIndexRoute
  '/_authenticated/workspace/$docId/': typeof AuthenticatedWorkspaceDocIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/workspace'
    | '/settings'
    | '/workspace/'
    | '/workspace/$docId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/settings' | '/workspace' | '/workspace/$docId'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/_authenticated/workspace'
    | '/_authenticated/settings'
    | '/_authenticated/workspace/'
    | '/_authenticated/workspace/$docId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedSettingsRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/workspace': {
      id: '/_authenticated/workspace'
      path: '/workspace'
      fullPath: '/workspace'
      preLoaderRoute: typeof AuthenticatedWorkspaceRouteRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/workspace/': {
      id: '/_authenticated/workspace/'
      path: '/'
      fullPath: '/workspace/'
      preLoaderRoute: typeof AuthenticatedWorkspaceIndexRouteImport
      parentRoute: typeof AuthenticatedWorkspaceRouteRoute
    }
    '/_authenticated/workspace/$docId/': {
      id: '/_authenticated/workspace/$docId/'
      path: '/$docId'
      fullPath: '/workspace/$docId'
      preLoaderRoute: typeof AuthenticatedWorkspaceDocIdIndexRouteImport
      parentRoute: typeof AuthenticatedWorkspaceRouteRoute
    }
  }
}

interface AuthenticatedWorkspaceRouteRouteChildren {
  AuthenticatedWorkspaceIndexRoute: typeof AuthenticatedWorkspaceIndexRoute
  AuthenticatedWorkspaceDocIdIndexRoute: typeof AuthenticatedWorkspaceDocIdIndexRoute
}

const AuthenticatedWorkspaceRouteRouteChildren: AuthenticatedWorkspaceRouteRouteChildren =
  {
    AuthenticatedWorkspaceIndexRoute: AuthenticatedWorkspaceIndexRoute,
    AuthenticatedWorkspaceDocIdIndexRoute:
      AuthenticatedWorkspaceDocIdIndexRoute,
  }

const AuthenticatedWorkspaceRouteRouteWithChildren =
  AuthenticatedWorkspaceRouteRoute._addFileChildren(
    AuthenticatedWorkspaceRouteRouteChildren,
  )

interface AuthenticatedRouteRouteChildren {
  AuthenticatedWorkspaceRouteRoute: typeof AuthenticatedWorkspaceRouteRouteWithChildren
  AuthenticatedSettingsRoute: typeof AuthenticatedSettingsRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedWorkspaceRouteRoute:
    AuthenticatedWorkspaceRouteRouteWithChildren,
  AuthenticatedSettingsRoute: AuthenticatedSettingsRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
