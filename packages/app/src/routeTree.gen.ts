/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WorkspaceRouteRouteImport } from './routes/workspace/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorkspaceIndexRouteImport } from './routes/workspace/index'
import { Route as WorkspaceProjectHandleIndexRouteImport } from './routes/workspace/$projectHandle/index'
import { Route as WorkspaceProjectHandleDocIdIndexRouteImport } from './routes/workspace/$projectHandle/$docId/index'

const WorkspaceRouteRoute = WorkspaceRouteRouteImport.update({
  id: '/workspace',
  path: '/workspace',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkspaceIndexRoute = WorkspaceIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WorkspaceRouteRoute,
} as any)
const WorkspaceProjectHandleIndexRoute =
  WorkspaceProjectHandleIndexRouteImport.update({
    id: '/$projectHandle/',
    path: '/$projectHandle/',
    getParentRoute: () => WorkspaceRouteRoute,
  } as any)
const WorkspaceProjectHandleDocIdIndexRoute =
  WorkspaceProjectHandleDocIdIndexRouteImport.update({
    id: '/$projectHandle/$docId/',
    path: '/$projectHandle/$docId/',
    getParentRoute: () => WorkspaceRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/workspace': typeof WorkspaceRouteRouteWithChildren
  '/workspace/': typeof WorkspaceIndexRoute
  '/workspace/$projectHandle': typeof WorkspaceProjectHandleIndexRoute
  '/workspace/$projectHandle/$docId': typeof WorkspaceProjectHandleDocIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/workspace': typeof WorkspaceIndexRoute
  '/workspace/$projectHandle': typeof WorkspaceProjectHandleIndexRoute
  '/workspace/$projectHandle/$docId': typeof WorkspaceProjectHandleDocIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/workspace': typeof WorkspaceRouteRouteWithChildren
  '/workspace/': typeof WorkspaceIndexRoute
  '/workspace/$projectHandle/': typeof WorkspaceProjectHandleIndexRoute
  '/workspace/$projectHandle/$docId/': typeof WorkspaceProjectHandleDocIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/workspace'
    | '/workspace/'
    | '/workspace/$projectHandle'
    | '/workspace/$projectHandle/$docId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/workspace'
    | '/workspace/$projectHandle'
    | '/workspace/$projectHandle/$docId'
  id:
    | '__root__'
    | '/'
    | '/workspace'
    | '/workspace/'
    | '/workspace/$projectHandle/'
    | '/workspace/$projectHandle/$docId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  WorkspaceRouteRoute: typeof WorkspaceRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/workspace': {
      id: '/workspace'
      path: '/workspace'
      fullPath: '/workspace'
      preLoaderRoute: typeof WorkspaceRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workspace/': {
      id: '/workspace/'
      path: '/'
      fullPath: '/workspace/'
      preLoaderRoute: typeof WorkspaceIndexRouteImport
      parentRoute: typeof WorkspaceRouteRoute
    }
    '/workspace/$projectHandle/': {
      id: '/workspace/$projectHandle/'
      path: '/$projectHandle'
      fullPath: '/workspace/$projectHandle'
      preLoaderRoute: typeof WorkspaceProjectHandleIndexRouteImport
      parentRoute: typeof WorkspaceRouteRoute
    }
    '/workspace/$projectHandle/$docId/': {
      id: '/workspace/$projectHandle/$docId/'
      path: '/$projectHandle/$docId'
      fullPath: '/workspace/$projectHandle/$docId'
      preLoaderRoute: typeof WorkspaceProjectHandleDocIdIndexRouteImport
      parentRoute: typeof WorkspaceRouteRoute
    }
  }
}

interface WorkspaceRouteRouteChildren {
  WorkspaceIndexRoute: typeof WorkspaceIndexRoute
  WorkspaceProjectHandleIndexRoute: typeof WorkspaceProjectHandleIndexRoute
  WorkspaceProjectHandleDocIdIndexRoute: typeof WorkspaceProjectHandleDocIdIndexRoute
}

const WorkspaceRouteRouteChildren: WorkspaceRouteRouteChildren = {
  WorkspaceIndexRoute: WorkspaceIndexRoute,
  WorkspaceProjectHandleIndexRoute: WorkspaceProjectHandleIndexRoute,
  WorkspaceProjectHandleDocIdIndexRoute: WorkspaceProjectHandleDocIdIndexRoute,
}

const WorkspaceRouteRouteWithChildren = WorkspaceRouteRoute._addFileChildren(
  WorkspaceRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  WorkspaceRouteRoute: WorkspaceRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
